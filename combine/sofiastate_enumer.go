// Code generated by "enumer -type=SofiaState"; DO NOT EDIT.

package combine

import (
	"fmt"
	"strings"
)

const _SofiaStateName = "UNREGEDTRYINGREGISTERREGEDUNREGISTERFAILEDFAIL_WAITEXPIREDNOREGDOWNTIMEOUT"

var _SofiaStateIndex = [...]uint8{0, 7, 13, 21, 26, 36, 42, 51, 58, 63, 67, 74}

const _SofiaStateLowerName = "unregedtryingregisterregedunregisterfailedfail_waitexpirednoregdowntimeout"

func (i SofiaState) String() string {
	if i < 0 || i >= SofiaState(len(_SofiaStateIndex)-1) {
		return fmt.Sprintf("SofiaState(%d)", i)
	}
	return _SofiaStateName[_SofiaStateIndex[i]:_SofiaStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SofiaStateNoOp() {
	var x [1]struct{}
	_ = x[UNREGED-(0)]
	_ = x[TRYING-(1)]
	_ = x[REGISTER-(2)]
	_ = x[REGED-(3)]
	_ = x[UNREGISTER-(4)]
	_ = x[FAILED-(5)]
	_ = x[FAIL_WAIT-(6)]
	_ = x[EXPIRED-(7)]
	_ = x[NOREG-(8)]
	_ = x[DOWN-(9)]
	_ = x[TIMEOUT-(10)]
}

var _SofiaStateValues = []SofiaState{UNREGED, TRYING, REGISTER, REGED, UNREGISTER, FAILED, FAIL_WAIT, EXPIRED, NOREG, DOWN, TIMEOUT}

var _SofiaStateNameToValueMap = map[string]SofiaState{
	_SofiaStateName[0:7]:        UNREGED,
	_SofiaStateLowerName[0:7]:   UNREGED,
	_SofiaStateName[7:13]:       TRYING,
	_SofiaStateLowerName[7:13]:  TRYING,
	_SofiaStateName[13:21]:      REGISTER,
	_SofiaStateLowerName[13:21]: REGISTER,
	_SofiaStateName[21:26]:      REGED,
	_SofiaStateLowerName[21:26]: REGED,
	_SofiaStateName[26:36]:      UNREGISTER,
	_SofiaStateLowerName[26:36]: UNREGISTER,
	_SofiaStateName[36:42]:      FAILED,
	_SofiaStateLowerName[36:42]: FAILED,
	_SofiaStateName[42:51]:      FAIL_WAIT,
	_SofiaStateLowerName[42:51]: FAIL_WAIT,
	_SofiaStateName[51:58]:      EXPIRED,
	_SofiaStateLowerName[51:58]: EXPIRED,
	_SofiaStateName[58:63]:      NOREG,
	_SofiaStateLowerName[58:63]: NOREG,
	_SofiaStateName[63:67]:      DOWN,
	_SofiaStateLowerName[63:67]: DOWN,
	_SofiaStateName[67:74]:      TIMEOUT,
	_SofiaStateLowerName[67:74]: TIMEOUT,
}

var _SofiaStateNames = []string{
	_SofiaStateName[0:7],
	_SofiaStateName[7:13],
	_SofiaStateName[13:21],
	_SofiaStateName[21:26],
	_SofiaStateName[26:36],
	_SofiaStateName[36:42],
	_SofiaStateName[42:51],
	_SofiaStateName[51:58],
	_SofiaStateName[58:63],
	_SofiaStateName[63:67],
	_SofiaStateName[67:74],
}

// SofiaStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SofiaStateString(s string) (SofiaState, error) {
	if val, ok := _SofiaStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SofiaStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SofiaState values", s)
}

// SofiaStateValues returns all values of the enum
func SofiaStateValues() []SofiaState {
	return _SofiaStateValues
}

// SofiaStateStrings returns a slice of all String values of the enum
func SofiaStateStrings() []string {
	strs := make([]string, len(_SofiaStateNames))
	copy(strs, _SofiaStateNames)
	return strs
}

// IsASofiaState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SofiaState) IsASofiaState() bool {
	for _, v := range _SofiaStateValues {
		if i == v {
			return true
		}
	}
	return false
}
